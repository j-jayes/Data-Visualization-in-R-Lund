---
title: "03 Coordinate systems and axes"
title-slide-attributes:
  data-background-image: "preview_img/03-coordinate-systems-and-axes.jfif"
  data-background-size: "30%"
  data-background-opacity: "0.6"
format: 
  revealjs:
    code-overflow: wrap
    width: 1600
    height: 900
    fig-align: center
    default-image-extension: svg
image: "preview_img/03-coordinate-systems-and-axes.jfif"
favicon: html/favicon.ico
---

```{r}
library(tidyverse)
library(lubridate)
library(ggrepel)
library(cowplot)
library(here)
# ggplot2 settings so plots scale well for slide size 
theme_set(theme_gray(16)) # 16 for full width, 18 for half width


df <- read_rds(here::here("slides", "data", "swedens_population.rds"))
```

```{r}
median_pop <- df %>% 
  summarise(median(population)) %>% 
  pull()
```

## Example: Population of Swedish municipalities

A linear scale emphasizes large counties

```{r}
library(ggrepel)

df %>%
  filter(nchar(code) > 2) %>%
  mutate(pop_ratio = population / median_pop) %>%
  arrange(desc(pop_ratio)) %>%
  mutate(
    rank = row_number(),
    lab = case_when(
      pop_ratio > 9.5 ~ region,
      TRUE ~ NA_character_
    )
  ) %>%
  ggplot(aes(rank, pop_ratio, label = lab)) +
  geom_point(colour = "midnightblue") +
  geom_text_repel(nudge_x = 1) +
  scale_y_continuous(name = "Population number / median") +
  scale_x_continuous(
    name = "Swedish municipalities, from most to least populous",
    breaks = NULL
  ) +
  theme_minimal_hgrid(14) +
  theme(axis.line = element_blank())
```

## Example: Population of Swedish municipalities

A log scale shows symmetry around the median

```{r}
df %>%
  filter(nchar(code) > 2) %>%
  mutate(pop_ratio = population / median_pop) %>%
  arrange(desc(pop_ratio)) %>%
  mutate(rank = row_number()) %>%
  ggplot(aes(rank, pop_ratio, label = region)) +
  geom_point(colour = "midnightblue") +
  geom_text_repel(nudge_x = 1, max.overlaps = 10) +
  scale_y_log10(
    name = "Population number / median",
    breaks = c(0.01, 0.1, 1, 10, 100),
    labels = expression(10^-2, 10^-1, 10^0, 10^1, 10^2)
  ) +
  scale_x_continuous(
    name = "Swedish municipalities, from most to least populous",
    breaks = NULL
  ) +
  theme_minimal_hgrid(14) +
  theme(axis.line = element_blank())
```

## Nonlinear coordinate systems: Polar coordinates

::::: {.columns}

:::: {.column width="50%"}


```{r}

df_points <- tibble(
  x = c(1, 3.5, 0),
  y = c(3, 4, 0),
  label = c("(1, 3)", "(3.5, 4)", "(0, 0)"),
  vjust_polar = c(1.6, 1, 1.6),
  hjust_polar = c(.5, -.1, 0.5),
  vjust_cart = c(1.6, 1.6, -.6),
  hjust_cart = c(0.5, 1.1, -.1)
)
df_segments <- tibble(
  x0 = c(0, 1, 2, 3, 0, 0, 0, 0),
  x1 = c(0, 1, 2, 3, 4, 4, 4, 4),
  y0 = c(0, 0, 0, 0, 1, 2, 3, 4),
  y1 = c(4, 4, 4, 4, 1, 2, 3, 4)
)
ggplot(df_points, aes(x, y)) +
  geom_point(size = 2, color = "#0072B2") +
  geom_text(
    aes(label = label, vjust = vjust_cart, hjust = hjust_cart),
    size = 14/.pt
  ) +
  scale_x_continuous(
    name = "x axis",
    limits = c(-0.5, 4.5),
    expand = c(0, 0)
  ) +
  scale_y_continuous(
    name = "y axis",
    limits = c(-0.5, 4.5),
    expand = c(0, 0)
  ) +
  coord_fixed() +
  theme_minimal_grid(16) +
  theme(
    axis.ticks = element_blank(),
    axis.ticks.length = grid::unit(0, "pt")
  )
```

::::

:::: {.column width="50%"}

::: {.fragment}

```{r}

ggplot(df_points, aes(x, y)) +
  geom_segment(
    data = df_segments,
    aes(x = x0, xend = x1, y = y0, yend = y1),
    size = theme_minimal_grid(16)$panel.grid$size,
    color = theme_minimal_grid(16)$panel.grid$colour,
    inherit.aes = FALSE
  ) +
  geom_point(size = 2, color = "#0072B2") +
  geom_text(
    aes(label = label, vjust = vjust_polar, hjust = hjust_polar),
    size = 14/.pt
  ) +
  scale_x_continuous(
    name = "x values (circular axis)",
    limits = c(0, 4)
  ) +
  scale_y_continuous(
    name = "y values (radial axis)",
    limits = c(0, 4)
  ) +
  coord_polar() +
  theme_minimal_grid(16) +
  background_grid(major = "none") +
  theme(
    axis.line.x = element_blank(),
    axis.ticks = element_line(color = "black")
  )
```

:::

::::

:::::

## Cartesian vs polar coordinates

::::: {.columns}

:::: {.column width="50%"}


```{r}
sun_hours <- read_rds(here::here("slides", "data", "sun_hours.rds"))

#| fig-align: center
sun_hours %>%
  ggplot(aes(x = date, y = sun_hours, color = city)) +
  geom_line(size = 1) +
  scale_y_continuous(labels = scales::number_format(accuracy = 1)) +
  scale_color_manual(
    name = NULL,
    values = c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
  ) +
  theme_minimal_grid(16) +
  labs(x = NULL, y = "Hours between sunrise and sunet")

```

::::

:::: {.column width="50%"}

```{r}
sun_hours %>%
  ggplot(aes(x = date, y = sun_hours, color = city)) +
  geom_line(size = 1) +
  scale_y_continuous(labels = scales::number_format(accuracy = 1)) +
  scale_color_manual(
    name = NULL,
    values = c("#E69F00", "#56B4E9", "#009E73", "#CC79A7")
  ) +
  coord_polar() +
  theme_minimal_grid(16) +
  labs(x = NULL, y = "Hours between sunrise and sunet")
```


::::

::::

# Scales and coordinate systems in **ggplot2**

## Scale functions customize the x and y axes

Recall the musical artists example from a prior lecture

```{r}
#| include: false
#| echo: false

artists <- tibble(
  artist = c("ABBA", "Avicii", "José González", "Timbuktu", "Robyn"),
  monthly_streamers = c(23483532, 29468049, 4067263, 383274, 3110310)
) %>%
  arrange(desc(monthly_streamers)) %>% 
  mutate(rank = row_number(),
         monthly_streamers = monthly_streamers / 1000000) %>% 
  relocate(rank, .before = artist)
```


```{r}
#| echo: true
#| output-location: column

ggplot(artists, 
       aes(monthly_streamers, 
           fct_reorder(artist, monthly_streamers))) +
  geom_col()
```

## Scale functions customize the x and y axes

Add scale functions (no change in figure so far)

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "|5,6"

ggplot(artists, 
       aes(monthly_streamers, 
           fct_reorder(artist, monthly_streamers))) +
  geom_col() +
  scale_x_continuous() +
  scale_y_discrete()
```

## Scale functions customize the x and y axes

The parameter `name` sets the axis title

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "|6,9"

ggplot(artists, 
       aes(monthly_streamers, 
           fct_reorder(artist, monthly_streamers))) +
  geom_col() +
  scale_x_continuous(
    name = "Monthly streamers"
  ) +
  scale_y_discrete(
    name = NULL # no axis title
  )
```

::: aside
Note: We could do the same with `xlab()` and `ylab()`
:::


